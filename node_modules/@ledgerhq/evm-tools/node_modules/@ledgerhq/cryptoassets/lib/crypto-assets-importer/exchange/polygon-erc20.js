"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importPolygonERC20Exchange = void 0;
const fs_1 = __importDefault(require("fs"));
const fetch_1 = require("../fetch");
const importPolygonERC20Exchange = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("importing Polygon-ERC20 exchange...");
    try {
        const [polygonERC20Exchange, hash] = yield (0, fetch_1.fetchTokens)("evm/137/erc20-exchange.json");
        fs_1.default.writeFileSync(`${outputDir}/exchange/polygon-erc20.json`, JSON.stringify(polygonERC20Exchange));
        if (hash) {
            fs_1.default.writeFileSync(`${outputDir}/exchange/polygon-erc20-hash.json`, JSON.stringify(hash));
        }
        const polygonerc20typeStringified = `export type PolygonERC20Exchange = [string, string, string];`;
        const hashStringified = hash
            ? `export { default as hash } from "./polygon-erc20-hash.json";`
            : "";
        const exchangesStringified = `import exchanges from "./polygon-erc20.json";`;
        const exportStringified = `export default exchanges as PolygonERC20Exchange[];`;
        fs_1.default.writeFileSync(`${outputDir}/exchange/polygon-erc20.ts`, `${polygonerc20typeStringified}

${hashStringified}

${exchangesStringified}

${exportStringified}
`);
        console.log("importing Polygon-ERC20 exchange success");
    }
    catch (err) {
        console.error(err);
    }
});
exports.importPolygonERC20Exchange = importPolygonERC20Exchange;
//# sourceMappingURL=polygon-erc20.js.map